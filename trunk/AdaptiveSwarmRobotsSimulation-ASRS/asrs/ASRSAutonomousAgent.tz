@include "basics/basicAutonomousAgent.tz"
@include "AdaptiveBrain.tz"                 #ECa#Incluido referencia para o arquivo do componente de cerebro adaptativo.

basicAutonomousAgent : JasmineIII {
    + variables:
        # Here you can add some variables ONLY for the simulation.
        # Read the documentation for knowing which variables are
        # given by the system.
        adaptiveBrain (object).             #ECa#Referência para o objeto de cérebro adaptativo#
        infoRegs1 (string).                 #ECa#Registradores de estado#
        infoRegs2 (string).                 #ECa#Registradores de estado#
        feromoneos (string).                #ECa#Campo para manipulacao de feromoneos#
        
            
    
    #Constructor method
    + to init-with id i (int) behavioralRole br(int):
        return (super init-with id i behavioralRole br).
    
      
    #This performs analyse of commands and generate plans  
    + to Planning:
        #To redirect to the internal state when a basic command is executed (software interruptions).
        if((self TWI_decode)>0):{       #Pending Command 
            return.
        }
        
        # For implementing the energy value.
        #if(energyValue<140):{                                   # interruption into critical energy state                                
        #    self save-color to (1,0,0).                         # indicate low energetical level -> red            
        #    self set-color to (1,0,0).
            #statusPlanLast=statusPlan.
            #statusPlan=8.

        #    if(energyValue<120):{                               # energetic death
        #        self stopRobot.                                 # stop                                        
        #        self save-color to (1,1,1).                     # indicate energetical death -> white           
        #        self set-color to (1,1,1).
        #        statusMain{7}="0".                              # no communication      
        #        statusPlanLast=0.                               # stop all activities        
        #        statusPlan=0.                                   # stop all activities
        #    }
        #}
        
        #ECa#Incluindo chamada ao brain.
        
        if(behavioralRole==BHV_BASE):{
          statusPlan=20.
          return.
        }
        
        if(behavioralRole==BHV_OBJ):{
          statusPlan=25.
          return.
        }
        
        statusPlanLast=statusPlan.
        
        if(statusComm2{7}=="1" && receive16==2):{
          infoRegs2{0}="1".
        }
        else
        {
          infoRegs2{0}="0".
        }
        
        if(statusComm2{7}=="1"):{
          statusPlan= adaptiveBrain get-robot-plan ReceivedMessage receivMessage1 InformationRegisters infoRegs1.
        }
        else
        {
          statusPlan= adaptiveBrain get-robot-plan ReceivedMessage "00000000" InformationRegisters infoRegs1.
        }
        
    #This executes plans
    + to ExecutePlan:
#------------------------------ Basic Plans, please do not change them ------------------------------#
        if(statusPlan==0):{     #idle sleep mode    
            self stopRobot.
            return.
        }
        if(statusPlan==1):{     #do nothing state
            return.
        }
        if(statusPlan==2):{     #stop state   
            self stopRobot.
            statusPlan=0.
            return.
        }
        if(statusPlan==3):{     #move state
            self moveRobot distance 0.
            errorState=0.
            askTouch=0.
            statusPlan=1.
            return.
        }
        if(statusPlan==4):{     #rotate LEFT state
            self Rotate direction LEFT degrees avoiding.
            statusPlan=1.
            return.
        }
        if(statusPlan==5):{     #rotate RIGHT state
            self Rotate direction RIGHT degrees avoiding.
            statusPlan=1.
            return.
        }
        if(statusPlan==6):{                             #collision avoiding state
            if(localSensors[2]>localSensors[6]):{       #Detect where the obstacle is farer.
                self Rotate direction LEFT degrees avoiding.
            }else{
                self Rotate direction RIGHT degrees avoiding.
            }
            statusPlan=7.
            return.
        }
        if(statusPlan==7):{             #decision point in collision avoiding
            errorState++.
            if(statusMain{6}=="0"):{    #Robot has not finished rotation
                return.
            }
            if(statusMain{1}=="1"):{      #There is an obstacle
                statusPlan=6.             #Collision avoiding
            }else{
                statusPlan=3.             #Move
            }
            if(errorState>70 && askTouch==0):{  #Go backwards when too many collision and high touch value
                self stopRobot.
                askTouch=1.
                self GetTouchValue.
            }
            return.
        }
        if(statusPlan==8):{     #low energy state
            self stopRobot.
            statusPlanLast=statusPlan.
            return.
        }
        if(statusPlan==9):{     #touch stablished or lost state
            statusPlan=statusPlanLast.
            return.
        }
        if(statusPlan==10):{     #Receive value from the touch sensor    
            if(touchValue==1):{
                if(askTouch==1):{
                    self SetVelocity velocity 4.        #Go reverse
                    self moveRobot distance 10.
                    statusMain{6}="0".                  #Clear synchronization flag
                }
                if(statusMain{6}=="0"):{
                    return.
                }else{
                    askTouch=0.
                    self SetVelocity velocity 1.        
                    statusPlan=3.                       #Move
                }
            }
            statusMain{6}="1".                          #Set synchronization flag
            self SetVelocity velocity 1.                #Maximun velocity forwards
            statusPlan=3.                               #Move
            askTouch=0.
            return.
        }
        if(statusPlan==11):{     #Receive value from the energy sensor    
            statusPlan=statusPlanLast.
            return.
        }
        if(statusPlan==12):{     #Received new message state    
            self stopRobot.
            statusPlan=0.
            return.
        }
        if(statusPlan==13):{     #S1 sensor value
            statusPlan=statusPlanLast.
            return.
        }
        if(statusPlan==14):{     #state when TIMER is fired    
            statusPlan=statusPlanLast.
            return.
        }
		
        if(statusPlan==15):{     #S2 sensor value  
            statusPlan=statusPlanLast.
            return.
        }
        
        if(statusPlan==16):{     #Color sensor value
            statusPlan=statusPlanLast.
            return.
        }
        
        #ECa#Plans for the projected behavior
        if(statusPlan==20):{ #base
          sendMessage1 = "11111111".                 #mensagem de identificação de base
          send16 = 0.	                               #envia 16 bits
          statusComm1[0] = 1.	                       #envia 1 vez
          statusComm2 = "01111110".	                 #envia em todos os canais.
          statusMain{7} = "0".                       #desabilita o recebimento de mensagens
          return.
        }
        
        if(statusPlan==25):{ #objeto
          infoRegs1{6} = "1".                        #mensagem de inicializado (ri)
          sendMessage1 = "00000010".                 #mensagem de identificação de objeto (oe)
          sendMessage2 = FEROMONEOS_VALOR_MAX.       #mensagem contendo feromoneos
          sendMessage2 += "000000".
          send16 = 2.	                               #envia 16 bits
          statusComm1[0] = 1.	                       #envia 1 vez
          statusComm2 = "01111110".	                 #envia em todos os canais.
          statusMain{7} = "0".                       #habilita o recebimento de mensagens
          return.
        }
        
        if(statusPlan==30):{ #Inicializacao
          infoRegs1{6} = "1".                                           #mensagem de inicializado (ri)
          return.
        }
        
        if(statusPlan==40):{ #Parado
          infoRegs1{3} = "0".                                           #Seta flag de robo em movimento para 0  
          sendMessage1 = "00100000".                                    #mensagem de inicio de movimento (cm)
          send16 = 0.	                                                  #envia 8 bits
          statusComm1[0] = 1.                                         #envia 1 vez
          statusComm2 = "01111110".	                                    #envia em todos os canais
          statusMain{7} = "1".                                          #habilita o recebimento de mensagens
          statusPlan = 2.                                               #plan interno de robo parado
          return.
        }
        
        if(statusPlan==50):{ #Movendo-se
          infoRegs1{3} = "1".                                           #Seta flag de robo em movimento para 1
          sendMessage1 = "00001100".                                    #mensagem de robo em movimento (rm)
          send16 = 0.	                                                  #envia 8 bits
          statusComm1[0] = 1.	                                          #envia 1 vez
          statusComm2 = "01111110".	                                    #envia em todos os canais
          statusMain{7} = "1".                                          #habilita o recebimento de mensagens
          #statusPlan = 3.                                               #plan interno de movimentacao do robo
          self moveRobot distance 0.
          errorState=0.
          askTouch=0.
          return.
        }
        
        if(statusPlan==60):{ #Lendo Feromoneos
          #transfere feromoneos para o campo de manipulacao.
          feromoneos{0} = receivMessage2{1}.
          feromoneos{1} = receivMessage2{2}.
          
          #seta registradores de informacao com os valores de feromoneos lidos
          if(feromoneos == FEROMONEOS_VALOR_MAX):{
            infoRegs1{4} = feromoneos{1}.            #Flag de feromoneos em nivel maximo.
          }
          else
          {
            infoRegs1{4} = feromoneos{0}.
          }
          
          if(feromoneos == FEROMONEOS_VALOR_MIN):{
            infoRegs1{5} = feromoneos{1}.            #Flag de feromoneos em nivel minimo.
          }
          else
          {
            infoRegs1{5} = feromoneos{0}.
          }
          
          #diminiu intesidade do feromoneo
          if(feromoneos - 1 > FEROMONEOS_VALOR_MIN):{
            feromoneos = feromoneos - 1.
          }
          else
          {
            feromoneos = "00".
          }
          
          return.
        }
        
        if(statusPlan==70):{ #Waypoint
          self stopRobot.                            #para o robo
          self LED_playB.                            #acende o led azul para identificar visualmente o waypoint
          infoRegs1 = "00000000".
          infoRegs1{0} = "1".                        #seta o flag de disseminacao de feromoneos
          infoRegs1{6} = "1".                        #robo inicializado
          statusMain{7} = "0".                       #desabilita o recebimento de mensagens
          return.
        }
        
        if(statusPlan==80):{ #Disseminando Feromoneos
          sendMessage1 = "00000100".                 #mensagem de identificação de waypoint (we)
          sendMessage2 = feromoneos.        	       #mensagem contendo feromoneos
          sendMessage2 += "000000".
          send16 = 2.	                               #envia 16 bits
          statusComm1[0] = 1.	                       #envia 1 vez
          statusComm2 = "01111110".	                 #envia em todos os canais.
          statusMain{7} = "1".                       #habilita o recebimento de mensagens
          return.
        }
        
        if(statusPlan==90):{ #Interagindo com Robô
          return.
        }
        
        if(statusPlan==100):{ #Monitorando em direção ao objeto
          self LED_playG.                            #acende o led azul para identificar visualmente o monitoramento em direcao ao objeto
          return.
        }
        
        if(statusPlan==110):{ #Monitorando em direção oposta ao objeto
          self LED_playR.                            #acende o led vermelho para identificar visualmente o monitoramento para longe do objeto
          return.
        }
          
#------------------------------ User defined activities, please add your plans ----------------------#
        #if(statusPlan==30):{     #User Plan 1
        #    statusMain{7}="0".
        #    self stopRobot.
        #    self set-color to (1,0,0).
        #    self save-color to (1,0,0).
        #    self SendMessage8 message "99000000" numberSend 9 channels "01111100".
        #    return.
        #}
        
# THIS METHOD IS EXECUTED IN EACH ITERATION OF THE SIMULATION. DO NOT CHANGE IT!!                    

    #Begin the autonomous cycle. This method is called in each iteration
    + to iterate:  
        if(isStart!=1):{        #For do nothing before push key "b".
            return.
        }
        #This part is used when the delay is active. Do not them it!
        if(delayActive):{
            return.
        }
        #End of delay method.

        #This part is used by the simulation for turning, please do not change it!
        if(turningFlag==1):{
            exec continueRotating robot self.
            return.
        }
        # End of Turning part
		
		#This part is used by the simulation for turning, please do not change it!
        if(movingFlag==1):{
            exec continueMoving robot self.
            return.
        }
        # End of Turning part
        
    ###############################################################################    
    #--------------------------------- MAIN LOOP ---------------------------------#
    ###############################################################################
    #--------------------------------- Sensing part ------------------------------#
        if(statusMain{5}=="1"):{  #Read proximity Flag is active
            self ReadProximity.
        }
    #----------------------------- Communication part ----------------------------#
        if ((statusMain{7})=="1"):{     #Listening Flag
            self ReceiveMessages.
        }
        if (statusComm1[0]>0):{       #Send when more than 1 time in register
            self SendMessages.   	
        }
        
        infoRegs2{0} = "0".             #ECa#Resetando o flag de feromoneos disponiveis
    #------------------------------ Planning part --------------------------------#
        self Planning.                  #Planning a Plan
    #----------------------------- Executing part --------------------------------#
        self ExecutePlan.              #Execute Plan
    
    ###############################################################################    
    #------------------------------- END MAIN LOOP -------------------------------#
    ###############################################################################
    
    # Method called when push the key "b" at the beginning of the simulation. You can modify it in
    # order to adapt the first plan of the robot.
    + to start:
        statusMain="00000101".      #Read proximity, listening
        statusComm2="01111110".     #All sensors are activated.
        #statusPlan=3.               #Move plan
        
        isStart=1.
        
        infoRegs1 = "00000000".
        infoRegs2 = "00000000".
        adaptiveBrain = new AdaptiveBrain.
        adaptiveBrain init-with-db robotId myID.
        statusPlan = adaptiveBrain get-robot-plan ReceivedMessage "00000000" InformationRegisters infoRegs1.
        
        if(behavioralRole==BHV_BASE):{		#base
    			statusPlan=0.
    		}	
        
    		if(behavioralRole==BHV_OBJ):{		  #objeto
    			statusPlan=0.                  #ECa#Testando Feromoneos.#Colocar plano de emissao de feromoneos
    		}
        
        #Example of change initial position and initial color.
        #if(myID==0):{
        #    self save-color to (0,1,0).
        #    self set-color to (0,1,0).
        #    self SendMessage8 message "33000000" numberSend (NUMBER_ROBOTS-(1)) channels "01111100".
        #    statusPlan=0.
        #    self move to (20,LENGTH_ROBOT/2,40).
        #}
}